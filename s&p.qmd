---
title: "S&P 500"
format:
  html:
    code-fold: true
jupyter: python3
---
Test test
S&P500 since year 2000, see @fig-sp.

```{python}
#| label: fig-sp
#| fig-cap: "S&P500<br>Source: Alpha Vantage"

import pandas as pd
import plotly.graph_objs as go

# URL of the raw CSV file from GitHub
url = 'https://raw.githubusercontent.com/martingeew/finance_dashboard_demo/main/sp500_20240825.csv'

# Read the CSV file into a DataFrame
df = pd.read_csv(url, index_col=0) 


def plot_daily(df):
    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=df.index,
            y=df["close"],
            mode="lines",
            name="S&P 500 Close",
            hovertemplate="%{x|%Y-%m-%d}<br>Close: %{y:.2f}<extra></extra>",
        )
    )

    fig.update_layout(
        title="Daily S&P 500 Closing value",
        xaxis_title="",
        yaxis_title="",
        template="plotly_dark",  # Use the dark mode template
    )

    fig.show()


plot_daily(df)
```

Above is the example plot from https://read.readwise.io/read/01jv88nrd5eng7q8j4sb9t20j2

Below I have attempted to do my own graph from a previous project @mid-temp. The end goal is to have a dashboard where one can:<br>
- Select files to view on the provided graphs<br>
- Provide a visual list of said files in a given directory and have them be interactable like the point above ^^^ <br>
- Provide a page or comparison selection that variables from two data sets can be compared on a single graph<br>
- Have the graphs at least marginally editable such that a user can change axes limits, titles, decimal points, etc.<br>
This is a test <br>
Test #2??????

```{python}
#| label: mid-temp
#| fig-cap: "S&P500<br>Source: Alpha Vantage"

import os
import pandas as pd
import plotly.graph_objs as go


def plot_mid_temp(df):
    fig = go.Figure()
    fig.add_trace(
        go.Scatter(
            x=(df.index/0.5)/60,
            y=df["8"],
            mode="lines",
            name="Center Node Temperature",
            customdata=(df.index/0.5)/60,
            hovertemplate="Temp %{customdata:.2f}<br>Temp: %{y:.2f}<extra></extra>",
        )
    )

    fig.update_layout(
        title="PCM Temperature at the Center Node",
        xaxis_title="Elapsed Simulation Time (mins)",
        yaxis_title="Temperature (Â°C)",
        template="plotly_dark",  # Use the dark mode template
    )
    fig.show()


onedrive_path=r'C:\Users\Breto\OneDrive - QSBRI inc\\'
stash_direc=r'Documents - QSBRI Home\017 Stash Energy\\'
sensitivity_direc=r'017 Stash Energy 1D Model\PCM Sensitivity analysis'
sensitivity_path=os.path.join(onedrive_path,stash_direc,sensitivity_direc)

folders = os.listdir(sensitivity_path)

folder_path = os.path.join(sensitivity_path,folders[0])
files = os.listdir(folder_path)
file = files[6]

temp_data = pd.read_csv(os.path.join(folder_path,file))

plot_mid_temp(temp_data)


```